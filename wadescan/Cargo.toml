[package]
name = "wadescan"
version = "0.1.0"
edition = "2021"

[dependencies]
wadescan-common = { path = "../wadescan-common", features = ["user"] }

anyhow = { workspace = true, default-features = true }
aya = { workspace = true }
aya-log = { workspace = true }
env_logger = { workspace = true }
libc = { workspace = true }
xdpilone = { workspace = true, default-features = true }
dashmap = { workspace = true, default-features = true }
default-net = { workspace = true, default-features = true }
rand = "0.8.5"
perfect_rand = { workspace = true, default-features = true }
tokio = { workspace = true, features = ["full"] }
rustc-hash = "2.1.0"
log = "0.4.22"
rayon = "1.10.0"
serde = "1.0.217"
toml = "0.8.19"
base64 = "0.22.1"
serde_json = "1.0.133"
mongodb = "3.1.1"

[dev-dependencies]
criterion = { version = "0.5", features = ["html_reports"] }

[[bench]]
name = "bench"
harness = false

[build-dependencies]
anyhow = { workspace = true }
aya-build = { workspace = true }
# TODO(https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependecy so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.
wadescan-ebpf = { path = "../wadescan-ebpf" }

[[bin]]
name = "wadescan"
path = "src/main.rs"
